<?xml version="1.0" encoding="UTF-8"?>
<Graph author="reichman" created="Thu Aug 15 09:05:52 CEST 2019" guiVersion="5.4.0.535" id="1565852865050" licenseCode="JavlinInternalLicense" name="echo" nature="restJob" showComponentDetails="true">
<Global>
<EndpointSettings>
<UrlPath>/echo</UrlPath>
<RequestMethod name="GET"/>
</EndpointSettings>
<RestJobResponseStatus>
<JobError>
<ReasonPhrase>Job failed</ReasonPhrase>
<StatusCode>500</StatusCode>
</JobError>
<Success>
<StatusCode>200</StatusCode>
</Success>
<ValidationError>
<ReasonPhrase>Request validation failed</ReasonPhrase>
<StatusCode>400</StatusCode>
</ValidationError>
</RestJobResponseStatus>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="requestEcho" recordDelimiter="\n" type="delimited">
<Field name="requestBody" type="string"/>
<Field name="requestClientIpAddress" type="string"/>
<Field name="requestContentType" type="string"/>
<Field name="requestEncoding" type="string"/>
<Field name="requestHeaders" type="string"/>
<Field name="requestMethod" type="string"/>
<Field name="requestParameters" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="FFFFB0" folded="false" fontSize="medium" height="240" id="Note0" textColor="444444" width="410" x="340" y="20">
<attr name="text"><![CDATA[h3. REST Job Body
[Example Request Echo|element://GET_JOB_INPUT0] demonstrates how to access HTTP context in CTL. Replace it with your own transformation logic.

To use input parameters as a component attribute value use *${PARAM_NAME}*. See custom attribute *Custom_Attribute_Example* on [Example Request Echo|element://GET_JOB_INPUT0].

In CTL you can access input parameters using the *getRequestParameter(PARAM_NAME)* function.

To configure the Data Service use [Endpoint Configuration|action://com.cloveretl.gui/com.cloveretl.gui.actions.ChangeGraphEditorTabAction?index=0] tab.]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Example Request Echo" guiX="450" guiY="280" id="GET_JOB_INPUT0" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[function integer transform() {

	//  Example CTL code shows how to access HTTP request/response.
	//  Code bellow processes request using getRequest... CTL functions.
	//  Similar function set exists for processing response (eg. setResponseBody(),
	//  setResponseStatus(), etc.)

	$out.0.requestBody = getRequestBody();
	$out.0.requestClientIpAddress = getRequestClientIPAddress();
	$out.0.requestContentType = getRequestContentType();
	$out.0.requestEncoding = getRequestEncoding();
 	$out.0.requestMethod = getRequestMethod();
	$out.0.requestHeaders = join(", ", getRequestHeaders());
	$out.0.requestParameters = join(", ", getRequestParameters());
	//$out.0.id = getRequestParameter("id")  // Get value of REST Job Input parameter 'id'

   //  It is also possible to use parameters and payloads as a component attribute values.
   //  Use ${PARAM_NAME} in component attribute editor to get value of input parameter.
   //  For reading payload as stream, use request:body as a URL for reader component.
	return ALL;
}]]></attr>
<attr name="guiDescription"><![CDATA[Replace this example component]]></attr>
<attr name="Custom_Attribute_Example"><![CDATA[${PARAM_NAME}]]></attr>
</Node>
<Node guiName="Input" guiX="80" guiY="10" id="RESTJOB_INPUT0" restJobInput="true" type="RESTJOB_INPUT"/>
<Node attachment="false" guiName="Output" guiX="900" guiY="10" id="RESTJOB_OUTPUT0" metadataName="true" responseFormat="JSON" restJobOutput="true" topLevelArray="true" type="RESTJOB_OUTPUT"/>
<Edge fromNode="GET_JOB_INPUT0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="RESTJOB_OUTPUT0:0"/>
</Phase>
</Graph>
