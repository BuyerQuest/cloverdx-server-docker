<?xml version="1.0" encoding="UTF-8"?>
<Graph author="reichman" created="Thu Aug 15 09:05:52 CEST 2019" guiVersion="0.0.0.devel" id="1565852865050" licenseCode="JavlinInternalLicense" name="echo" nature="restJob" showComponentDetails="true">
<Global>
<EndpointSettings>
<UrlPath>/echo/{message}</UrlPath>
<RequestMethod name="GET"/>
<RequestParameter id="RestJobParameter1" location="url_path" name="message" required="true"/>
</EndpointSettings>
<RestJobResponseStatus>
<JobError>
<ReasonPhrase>Job failed</ReasonPhrase>
<StatusCode>500</StatusCode>
</JobError>
<Success>
<StatusCode>200</StatusCode>
</Success>
<ValidationError>
<ReasonPhrase>Request validation failed</ReasonPhrase>
<StatusCode>400</StatusCode>
</ValidationError>
</RestJobResponseStatus>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="requestEcho" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="message" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="FFFFB0" folded="false" fontSize="medium" height="240" id="Note0" textColor="444444" width="410" x="340" y="20">
<attr name="text"><![CDATA[h3. REST Job Body
[Example Request Echo|element://GET_JOB_INPUT0] demonstrates how to access HTTP context in CTL. Replace it with your own transformation logic.

To use input parameters as a component attribute value use *${PARAM_NAME}*. See custom attribute *Custom_Attribute_Example* on [Example Request Echo|element://GET_JOB_INPUT0].

In CTL you can access input parameters using the *getRequestParameter(PARAM_NAME)* function.

To configure the Data Service use [Endpoint Configuration|action://com.cloveretl.gui/com.cloveretl.gui.actions.ChangeGraphEditorTabAction?index=0] tab.]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node Custom_Attribute_Example="${PARAM_NAME}" guiName="Example Request Echo" guiX="450" guiY="280" id="GET_JOB_INPUT0" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[function integer transform() {

	//  Example CTL code shows how to access HTTP request/response.
	//  Code bellow processes request using getRequest... CTL functions.
	//  Similar function set exists for processing response (eg. setResponseBody(),
	//  setResponseStatus(), etc.)

	//$out.0.id = getRequestParameter("id")  // Get value of REST Job Input parameter 'id'
	$out.0.message = getRequestParameter("message").unescapeUrlFragment();

   //  It is also possible to use parameters and payloads as a component attribute values.
   //  Use ${PARAM_NAME} in component attribute editor to get value of input parameter.
   //  For reading payload as stream, use request:body as a URL for reader component.

	setResponseContentType("text/html");
	
	return ALL;
}]]></attr>
<attr name="guiDescription"><![CDATA[Replace this example component]]></attr>
</Node>
<Node guiName="Input" guiX="80" guiY="10" id="RESTJOB_INPUT0" restJobInput="true" type="RESTJOB_INPUT"/>
<Node attachment="false" guiName="Output" guiX="900" guiY="10" id="RESTJOB_OUTPUT0" metadataName="true" responseFormat="CUSTOM" restJobOutput="true" topLevelArray="true" type="RESTJOB_OUTPUT"/>
<Node guiName="GetJobInput" guiX="280" guiY="10" id="RequestParametersValidator" restJobInput="true" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[//#CTL2
// Transforms input record into output record.
function integer transform() {
	if (isEmpty(getRequestParameter("message"))) { 
		raiseError("Missing required request parameter: 'message'");
	}
	return ALL;
}]]></attr>
</Node>
<Node fileURL="response:body" footer="&lt;/body&gt;&#13;&#10;&lt;/html&gt;" guiName="StructuredDataWriter" guiX="677" guiY="280" header="&lt;html&gt;&#13;&#10;&lt;head&gt;&#13;&#10;&#9;&lt;meta charset=&quot;utf-8&quot; /&gt;&#13;&#10;&#9;&lt;title&gt;$message&lt;/title&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body&gt;&#13;&#10;&#13;&#10;" id="STRUCTURED_DATA_WRITER" mask="&lt;h1&gt;$message&lt;/h1&gt;" type="STRUCTURE_WRITER"/>
<Edge fromNode="GET_JOB_INPUT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (Body port)" metadata="Metadata0" outPort="Port 0 (out)" toNode="STRUCTURED_DATA_WRITER:0"/>
</Phase>
</Graph>
